//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: debug.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Debug_DebugGetDebugDataCall: ClientCallUnary {}

fileprivate final class Debug_DebugGetDebugDataCallBase: ClientCallUnaryBase<Debug_GetDebugDataRequest, Debug_GetDebugDataReply>, Debug_DebugGetDebugDataCall {
  override class var method: String { return "/debug.Debug/GetDebugData" }
}


/// Instantiate Debug_DebugServiceClient, then call methods of this protocol to make API calls.
internal protocol Debug_DebugService: ServiceClient {
  /// Synchronous. Unary.
  func getDebugData(_ request: Debug_GetDebugDataRequest) throws -> Debug_GetDebugDataReply
  /// Asynchronous. Unary.
  func getDebugData(_ request: Debug_GetDebugDataRequest, completion: @escaping (Debug_GetDebugDataReply?, CallResult) -> Void) throws -> Debug_DebugGetDebugDataCall

}

internal final class Debug_DebugServiceClient: ServiceClientBase, Debug_DebugService {
  /// Synchronous. Unary.
  internal func getDebugData(_ request: Debug_GetDebugDataRequest) throws -> Debug_GetDebugDataReply {
    return try Debug_DebugGetDebugDataCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getDebugData(_ request: Debug_GetDebugDataRequest, completion: @escaping (Debug_GetDebugDataReply?, CallResult) -> Void) throws -> Debug_DebugGetDebugDataCall {
    return try Debug_DebugGetDebugDataCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Debug_DebugProvider {
  func getDebugData(request: Debug_GetDebugDataRequest, session: Debug_DebugGetDebugDataSession) throws -> Debug_GetDebugDataReply
}

internal protocol Debug_DebugGetDebugDataSession: ServerSessionUnary {}

fileprivate final class Debug_DebugGetDebugDataSessionBase: ServerSessionUnaryBase<Debug_GetDebugDataRequest, Debug_GetDebugDataReply>, Debug_DebugGetDebugDataSession {}


/// Main server for generated service
internal final class Debug_DebugServer: ServiceServer {
  private let provider: Debug_DebugProvider

  internal init(address: String, provider: Debug_DebugProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: Debug_DebugProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  internal init?(address: String, certificateString: String, keyString: String, provider: Debug_DebugProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal override func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    let provider = self.provider
    switch method {
    case "/debug.Debug/GetDebugData":
      return try Debug_DebugGetDebugDataSessionBase(
        handler: handler,
        providerBlock: { try provider.getDebugData(request: $0, session: $1 as! Debug_DebugGetDebugDataSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

