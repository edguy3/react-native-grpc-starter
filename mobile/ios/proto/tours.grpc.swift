//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: tours.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Tours_ToursGetToursCall: ClientCallUnary {}

fileprivate final class Tours_ToursGetToursCallBase: ClientCallUnaryBase<Tours_GetToursRequest, Tours_GetToursReply>, Tours_ToursGetToursCall {
  override class var method: String { return "/tours.Tours/GetTours" }
}


/// Instantiate Tours_ToursServiceClient, then call methods of this protocol to make API calls.
internal protocol Tours_ToursService: ServiceClient {
  /// Synchronous. Unary.
  func getTours(_ request: Tours_GetToursRequest) throws -> Tours_GetToursReply
  /// Asynchronous. Unary.
  func getTours(_ request: Tours_GetToursRequest, completion: @escaping (Tours_GetToursReply?, CallResult) -> Void) throws -> Tours_ToursGetToursCall

}

internal final class Tours_ToursServiceClient: ServiceClientBase, Tours_ToursService {
  /// Synchronous. Unary.
  internal func getTours(_ request: Tours_GetToursRequest) throws -> Tours_GetToursReply {
    return try Tours_ToursGetToursCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getTours(_ request: Tours_GetToursRequest, completion: @escaping (Tours_GetToursReply?, CallResult) -> Void) throws -> Tours_ToursGetToursCall {
    return try Tours_ToursGetToursCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Tours_ToursProvider {
  func getTours(request: Tours_GetToursRequest, session: Tours_ToursGetToursSession) throws -> Tours_GetToursReply
}

internal protocol Tours_ToursGetToursSession: ServerSessionUnary {}

fileprivate final class Tours_ToursGetToursSessionBase: ServerSessionUnaryBase<Tours_GetToursRequest, Tours_GetToursReply>, Tours_ToursGetToursSession {}


/// Main server for generated service
internal final class Tours_ToursServer: ServiceServer {
  private let provider: Tours_ToursProvider

  internal init(address: String, provider: Tours_ToursProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: Tours_ToursProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  internal init?(address: String, certificateString: String, keyString: String, provider: Tours_ToursProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal override func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    let provider = self.provider
    switch method {
    case "/tours.Tours/GetTours":
      return try Tours_ToursGetToursSessionBase(
        handler: handler,
        providerBlock: { try provider.getTours(request: $0, session: $1 as! Tours_ToursGetToursSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

