// Code generated by protoc-gen-go. DO NOT EDIT.
// source: debug.proto

package debug

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetVersionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVersionRequest) Reset()         { *m = GetVersionRequest{} }
func (m *GetVersionRequest) String() string { return proto.CompactTextString(m) }
func (*GetVersionRequest) ProtoMessage()    {}
func (*GetVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_fee90202465ad0bf, []int{0}
}
func (m *GetVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVersionRequest.Unmarshal(m, b)
}
func (m *GetVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVersionRequest.Marshal(b, m, deterministic)
}
func (dst *GetVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVersionRequest.Merge(dst, src)
}
func (m *GetVersionRequest) XXX_Size() int {
	return xxx_messageInfo_GetVersionRequest.Size(m)
}
func (m *GetVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVersionRequest proto.InternalMessageInfo

type GetVersionReply struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVersionReply) Reset()         { *m = GetVersionReply{} }
func (m *GetVersionReply) String() string { return proto.CompactTextString(m) }
func (*GetVersionReply) ProtoMessage()    {}
func (*GetVersionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_fee90202465ad0bf, []int{1}
}
func (m *GetVersionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVersionReply.Unmarshal(m, b)
}
func (m *GetVersionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVersionReply.Marshal(b, m, deterministic)
}
func (dst *GetVersionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVersionReply.Merge(dst, src)
}
func (m *GetVersionReply) XXX_Size() int {
	return xxx_messageInfo_GetVersionReply.Size(m)
}
func (m *GetVersionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVersionReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetVersionReply proto.InternalMessageInfo

func (m *GetVersionReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type PingRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_fee90202465ad0bf, []int{2}
}
func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (dst *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(dst, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PingReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReply) Reset()         { *m = PingReply{} }
func (m *PingReply) String() string { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()    {}
func (*PingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_fee90202465ad0bf, []int{3}
}
func (m *PingReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingReply.Unmarshal(m, b)
}
func (m *PingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingReply.Marshal(b, m, deterministic)
}
func (dst *PingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReply.Merge(dst, src)
}
func (m *PingReply) XXX_Size() int {
	return xxx_messageInfo_PingReply.Size(m)
}
func (m *PingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReply.DiscardUnknown(m)
}

var xxx_messageInfo_PingReply proto.InternalMessageInfo

func (m *PingReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type StreamRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_fee90202465ad0bf, []int{4}
}
func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (dst *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(dst, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type StreamReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamReply) Reset()         { *m = StreamReply{} }
func (m *StreamReply) String() string { return proto.CompactTextString(m) }
func (*StreamReply) ProtoMessage()    {}
func (*StreamReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_fee90202465ad0bf, []int{5}
}
func (m *StreamReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamReply.Unmarshal(m, b)
}
func (m *StreamReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamReply.Marshal(b, m, deterministic)
}
func (dst *StreamReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamReply.Merge(dst, src)
}
func (m *StreamReply) XXX_Size() int {
	return xxx_messageInfo_StreamReply.Size(m)
}
func (m *StreamReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamReply.DiscardUnknown(m)
}

var xxx_messageInfo_StreamReply proto.InternalMessageInfo

func (m *StreamReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*GetVersionRequest)(nil), "debug.GetVersionRequest")
	proto.RegisterType((*GetVersionReply)(nil), "debug.GetVersionReply")
	proto.RegisterType((*PingRequest)(nil), "debug.PingRequest")
	proto.RegisterType((*PingReply)(nil), "debug.PingReply")
	proto.RegisterType((*StreamRequest)(nil), "debug.StreamRequest")
	proto.RegisterType((*StreamReply)(nil), "debug.StreamReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DebugClient is the client API for Debug service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugClient interface {
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionReply, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	ServerStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Debug_ServerStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Debug_ClientStreamClient, error)
	BidiStream(ctx context.Context, opts ...grpc.CallOption) (Debug_BidiStreamClient, error)
}

type debugClient struct {
	cc *grpc.ClientConn
}

func NewDebugClient(cc *grpc.ClientConn) DebugClient {
	return &debugClient{cc}
}

func (c *debugClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionReply, error) {
	out := new(GetVersionReply)
	err := c.cc.Invoke(ctx, "/debug.Debug/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/debug.Debug/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) ServerStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Debug_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Debug_serviceDesc.Streams[0], "/debug.Debug/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &debugServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Debug_ServerStreamClient interface {
	Recv() (*StreamReply, error)
	grpc.ClientStream
}

type debugServerStreamClient struct {
	grpc.ClientStream
}

func (x *debugServerStreamClient) Recv() (*StreamReply, error) {
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *debugClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Debug_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Debug_serviceDesc.Streams[1], "/debug.Debug/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &debugClientStreamClient{stream}
	return x, nil
}

type Debug_ClientStreamClient interface {
	Send(*StreamRequest) error
	CloseAndRecv() (*StreamReply, error)
	grpc.ClientStream
}

type debugClientStreamClient struct {
	grpc.ClientStream
}

func (x *debugClientStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *debugClientStreamClient) CloseAndRecv() (*StreamReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *debugClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (Debug_BidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Debug_serviceDesc.Streams[2], "/debug.Debug/BidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &debugBidiStreamClient{stream}
	return x, nil
}

type Debug_BidiStreamClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamReply, error)
	grpc.ClientStream
}

type debugBidiStreamClient struct {
	grpc.ClientStream
}

func (x *debugBidiStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *debugBidiStreamClient) Recv() (*StreamReply, error) {
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DebugServer is the server API for Debug service.
type DebugServer interface {
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionReply, error)
	Ping(context.Context, *PingRequest) (*PingReply, error)
	ServerStream(*StreamRequest, Debug_ServerStreamServer) error
	ClientStream(Debug_ClientStreamServer) error
	BidiStream(Debug_BidiStreamServer) error
}

func RegisterDebugServer(s *grpc.Server, srv DebugServer) {
	s.RegisterService(&_Debug_serviceDesc, srv)
}

func _Debug_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DebugServer).ServerStream(m, &debugServerStreamServer{stream})
}

type Debug_ServerStreamServer interface {
	Send(*StreamReply) error
	grpc.ServerStream
}

type debugServerStreamServer struct {
	grpc.ServerStream
}

func (x *debugServerStreamServer) Send(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Debug_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DebugServer).ClientStream(&debugClientStreamServer{stream})
}

type Debug_ClientStreamServer interface {
	SendAndClose(*StreamReply) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type debugClientStreamServer struct {
	grpc.ServerStream
}

func (x *debugClientStreamServer) SendAndClose(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *debugClientStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Debug_BidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DebugServer).BidiStream(&debugBidiStreamServer{stream})
}

type Debug_BidiStreamServer interface {
	Send(*StreamReply) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type debugBidiStreamServer struct {
	grpc.ServerStream
}

func (x *debugBidiStreamServer) Send(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *debugBidiStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Debug_serviceDesc = grpc.ServiceDesc{
	ServiceName: "debug.Debug",
	HandlerType: (*DebugServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Debug_GetVersion_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Debug_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _Debug_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _Debug_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidiStream",
			Handler:       _Debug_BidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "debug.proto",
}

func init() { proto.RegisterFile("debug.proto", fileDescriptor_debug_fee90202465ad0bf) }

var fileDescriptor_debug_fee90202465ad0bf = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x49, 0x4d, 0x2a,
	0x4d, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x84, 0xb9, 0x04, 0xdd,
	0x53, 0x4b, 0xc2, 0x52, 0x8b, 0x8a, 0x33, 0xf3, 0xf3, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x94, 0xb4, 0xb9, 0xf8, 0x91, 0x05, 0x0b, 0x72, 0x2a, 0x85, 0x24, 0xb8, 0xd8, 0xcb, 0x20, 0x7c,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0x57, 0x49, 0x9d, 0x8b, 0x3b, 0x20, 0x33, 0x2f,
	0x1d, 0xaa, 0x17, 0xa4, 0x30, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x15, 0xa6, 0x10, 0xca, 0x55,
	0x52, 0xe5, 0xe2, 0x84, 0x28, 0x84, 0x9a, 0x87, 0x43, 0x99, 0x26, 0x17, 0x6f, 0x70, 0x49, 0x51,
	0x6a, 0x62, 0x2e, 0x61, 0x13, 0xd5, 0xb9, 0xb8, 0x61, 0x4a, 0xf1, 0x9a, 0x69, 0xb4, 0x99, 0x89,
	0x8b, 0xd5, 0x05, 0xe4, 0x5f, 0x21, 0x07, 0x2e, 0x2e, 0x84, 0xd7, 0x84, 0x24, 0xf4, 0x20, 0x41,
	0x82, 0x11, 0x04, 0x52, 0x62, 0x58, 0x64, 0x0a, 0x72, 0x2a, 0x95, 0x18, 0x84, 0xf4, 0xb8, 0x58,
	0x40, 0xde, 0x10, 0x12, 0x82, 0xaa, 0x40, 0xf2, 0xbc, 0x94, 0x00, 0x8a, 0x18, 0x44, 0xbd, 0x0d,
	0x17, 0x4f, 0x70, 0x6a, 0x51, 0x59, 0x6a, 0x11, 0xc4, 0xa9, 0x42, 0x22, 0x50, 0x35, 0x28, 0x9e,
	0x94, 0x12, 0x42, 0x13, 0x05, 0xeb, 0x35, 0x60, 0x04, 0xe9, 0x76, 0xce, 0xc9, 0x4c, 0xcd, 0x2b,
	0x21, 0x5d, 0xb7, 0x06, 0x48, 0x37, 0x97, 0x53, 0x66, 0x4a, 0x26, 0x39, 0x7a, 0x0d, 0x18, 0x93,
	0xd8, 0xc0, 0x29, 0xc5, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x85, 0x37, 0x59, 0xec, 0x38, 0x02,
	0x00, 0x00,
}
